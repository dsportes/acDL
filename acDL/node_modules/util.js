'use strict';

String.prototype.startsWith = function(str) {
	return (!str || (this.length >= str.length && this.substring(0, str.length) == str));
}
String.prototype.endsWith = function(str) {
	return (!str || (this.length >= str.length && this.substring(this.length - str.length) == str));
}
/*****************************************************/
function StringBuffer() { this.buffer = []; }
StringBuffer.prototype.append = function append(string) { this.buffer.push(string); return this; };
StringBuffer.prototype.toString = function toString() { return this.buffer.join(""); };
StringBuffer.prototype.join = function join(arg) { return this.buffer.join(arg); };
StringBuffer.prototype.isEmpty = function isEmpty() { return this.buffer.length != 0; };
StringBuffer.prototype.clear = function clear() { this.buffer = []; };
/*****************************************************/
Date.prototype.format = function(format) {
	let fullYear = this.getYear();
	if (fullYear < 1000)
		fullYear = fullYear + 1900;
	const hour = this.getHours();
	const day = this.getDate();
	const month = this.getMonth() + 1;
	const minute = this.getMinutes();
	const seconde = this.getSeconds();
	const ms = this.getMilliseconds();
	const reg = new RegExp('(d|m|Y|H|i|s|S)', 'g');
	const replacement = new Array();
	replacement['d'] = day < 10 ? '0' + day : day;
	replacement['m'] = month < 10 ? '0' + month : month;
	replacement['S'] = ms < 10 ? '00' + ms : (ms < 100 ? '0' + ms : ms);
	replacement['Y'] = fullYear;
	replacement['H'] = hour < 10 ? '0' + hour : hour;
	replacement['i'] = minute < 10 ? '0' + minute : minute;
	replacement['s'] = seconde < 10 ? '0' + seconde : seconde;
	return format.replace(reg, function($0) {
		return ($0 in replacement) ? replacement[$0] : $0.slice(1, $0.length - 1);
	});
};

Date.prototype.hhmmss = function() { return this.format("His"); };

Date.prototype.aammjj = function(){	return parseInt(this.format("Ymd")); };

Date.prototype.stdFormat = function() { return this.format("Y-m-d H:i:s.S"); };

Date.prototype.dumpName = function() { return this.format("YmdHis"); };

/************************************************************/

const AC = { desktop:null, dirpanels:[null, null, null]};

const events = require('events');
AC.eventEmitter = new events.EventEmitter();
AC.fs = require("fs");
AC.decoder = new TextDecoder("utf-8");
AC.jszip = require("jszip");

document.addEventListener('WebComponentsReady', () => {
	AC.fs.readFile("./sorts.json", 'utf-8', (err, data) => {
		if (err)
			alert("Lecture de ./sorts.json impossible. " + err.message);
		else {
			try {
				AC.sorts = JSON.parse(data);
			} catch (e) {
				alert("Erreur de syntaxe dans ./sorts.json. " + e.message);	
			}
		}
	});
});

AC.Util = class Util {
	static ptd(path){
		if (path.length == 0) return -1;
		const t = path.charAt(0);
		return t == "P" ? 0 : (t == "T" ? 1 : (t == "D" ? 2 : -1));
	}
	static editDH(dh){
		if (dh.length != 14) return null;
		try {
			const x = parseInt(dh, 10);
			if (x < 20120101000000 || x > 20991231235959) return;
			return dh.substring(0,4) + "-" + dh.substring(4,6) + "-" + dh.substring(6,8) + " "
			+ dh.substring(8,10) + ":" + dh.substring(10,12) + ":" + dh.substring(12,14);
		} catch (e) { return null; };
	}
	static editDHS(dh){
		if (!dh || dh.length != 17) return "";
		try {
			return dh.substring(0,4) + "-" + dh.substring(4,6) + "-" + dh.substring(6,8) + " "
			+ dh.substring(8,10) + ":" + dh.substring(10,12) + ":" + dh.substring(12,14) + "." + dh.substring(14,17);
		} catch (e) { return null; };
	}
};

AC.emit = function(ev, msg){
	setTimeout(() => {
		AC.eventEmitter.emit(ev, msg);
	}, 50);
}

AC.error = function(msg, detail){
	AC.emit("sbError", {msg:msg, detail:detail});
};
AC.info = function(msg, detail){
	AC.emit("sbInfo", {msg:msg, detail:detail});
};
AC.progress = function(msg, detail, done, total){
	AC.emit("sbProgress", {msg:msg, detail:detail, done:done, total:total});
};

AC.Base64 = {
	chars : "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",

	encode : function(bytes) {
		let i;
		const len = bytes.length;
		let base64 = "";

		for (i = 0; i < len; i+=3) {
			base64 += this.chars[bytes[i] >> 2];
			base64 += this.chars[((bytes[i] & 3) << 4) | (bytes[i + 1] >> 4)];
			base64 += this.chars[((bytes[i + 1] & 15) << 2) | (bytes[i + 2] >> 6)];
			base64 += this.chars[bytes[i + 2] & 63];
		}

		if ((len % 3) === 2) {
			base64 = base64.substring(0, base64.length - 1) + "=";
		} else if (len % 3 === 1) {
			base64 = base64.substring(0, base64.length - 2) + "==";
		}

		return base64;
	}
};
