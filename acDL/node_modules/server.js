'use strict';

AC.Server = function(url, pwd, dirName, onDone, onError){
	var https = url.startsWith("https://");
	if (https) {
		this.http = require('https');
		url = url.substring(8);
	} else if (url.startsWith("http://")) {
		this.http = require('http');
		url = url.substring(7);
	} else {
		alert("URL mal form�e : " + url);
		throw "URL mal form�e : " + url;
	}
	var i = url.indexOf("/");
	var site = url;
	this.path = "/";
	if (i != -1 && i != url.length - 1) {
		site = url.substring(0, i);
		this.path = url.substring(i);
	}
	this.path = this.path.endsWith("/") ? this.path + "admin" : this.path + "/admin";
	i = site.indexOf(":");
	if (i == -1 && i != site.length - 1){
		this.host = site;
		this.port = https ? 443 : 80;
	} else {
		this.host = site.substring(0, i);
		this.port = parseInt(site.substring(i + 1), 10);
	}
	var crypto = require('crypto');
	this.pwd = crypto.createHash('sha1').update(pwd + "00").digest('hex');
	this.dirName = dirName;
	if (!this.dirName.endsWith("/"))
		this.dirName += "/";
	this.filtre = {};
	AC.eventEmitter.on("requestDone", function(text){
		if (onDone)
			onDone(text);
	});
	AC.eventEmitter.on("requestError", function(error){
		if (onError)
			onError(error);
	});
};

AC.Server.prototype.close = function(){
	AC.eventEmitter.removeAllListeners("requestDone");
	AC.eventEmitter.removeAllListeners("requestError");
};

AC.Server.prototype.setFiltre = function(line, col, version, types) {
	var f = {};
	if (line) f.l = line;
	if (col) f.c = col;
	if (version) f.v = version;
	if (types) f.t = types;
	this.filtre = f;
};

AC.Server.prototype.onOff = function(isOn){
	this.filtre = null;
	var qs = this.initQs(isOn ? "on" : "off") + "\n";
	this.post(qs);
};

AC.Server.prototype.linesS = function(line, version){
	this.setFiltre(line, null, version, null);
	var qs = this.initQs("linesS");
	this.post(qs);
};

AC.Server.prototype.docsS = function(line, version){
	this.setFiltre(line, null, version, null);
	var qs = this.initQs("docsS");
	this.post(qs);
};

AC.Server.prototype.dumpS = function(line, col, version, types){
	this.setFiltre(null, col, version, types);
	var qs = this.initQs("dumpS");
	qs.l = line;
	this.post(qs, null, 1, line);
};

AC.Server.prototype.dumpD = function(line, versiond){
	this.setFiltre(line, null, versiond, null);
	var qs = this.initQs("dumpD");
	qs.l = line;
	this.post(qs, null, 2, line);
};

AC.Server.prototype.load = function(line, fileName){
	this.filtre = null;
	var qs = this.initQs("load");
	qs.l = line;
	this.post(qs, fileName);
};

AC.Server.prototype.loadD = function(line, fileName){
	this.filtre = null;
	var qs = this.initQs("loadD");
	qs.l = line;
	this.post(qs, fileName);
};

AC.Server.prototype.options = function(length){
	return {host:this.host, port:this.port, path:this.path, method:'POST', 
		headers:{'Content-Length':length}};
};

AC.Server.prototype.post = function(qs, fileName, toSave, name){
	var self = this;
	var postData = JSON.stringify(qs) + "\n";
	var size = postData.length ;
	if (fileName) {
		var stats = fs.statSync(this.dirName + filename);
		size += stats.size;
		var readStream = AC.fs.createReadStream(this.dirName + fileName);
	}
	var text = "";
	var err = "";
	var resSize = 0;
	if (toSave == 1) {
		var header = this.dirName + name + "_";
		var stream = null;
	} else if (toSave == 2) {
		var i = name.lastIndexOf("-");
		i = name.lastIndexOf("-", i - 1);
		i = name.lastIndexOf("-", i - 1);
		var d = this.dirName + name.substring(i + 1, i + 5);
		try {
			AC.fs.mkdirSync(d);
		} catch(e) {
		    if (e.code != 'EEXIST') {
		    	AC.eventEmitter.emit("requestError", "Création du directory " 
		    			+ d + " impossible :" + e.message);
		    	return;
		    }
		}
		var stream = AC.fs.createWriteStream(d + "/" + name);
	}
	var req = this.http.request(this.options(size), (res) => {
		// console.log(`STATUS: ${res.statusCode}`);
		// console.log(`HEADERS: ${JSON.stringify(res.headers)}`);
		res.on('data', (chunk) => {
			if (!toSave){
				if (err || chunk[0] == 36)
					err += chunk;
				else
					text += chunk;
			} else if (toSave == 2){
				if (err || chunk[0] == 36) // $
					err += chunk;
				else {
					stream.write(chunk);
					resSize += chunk.length;
				};
			} else {
				var s = 0;
				if (!stream) {
					if (err || chunk[0] == 36) { // $
						err += chunk;
					} else {					
						for(var i = 0; i < chunk.length; i++){
							var c = chunk[i];
							if (!c){
								s = i + 1;
								stream = AC.fs.createWriteStream(header + ".zip");
								break;
							} else
								header += String.fromCharCode(c);
						};
					};
				}
				if (!err) {
					var b = !s ? chunk : chunk.slice(s);
					stream.write(b);
					resSize += b.length;
				};
			};
		});
		res.on('end', () => {
			if (!err) {
				if (stream) {
					stream.end();
					AC.eventEmitter.emit("requestDone", resSize);
				} else
					AC.eventEmitter.emit("requestDone", text);
			} else {
				AC.eventEmitter.emit("requestError", err);				
			}
		});
	});

	req.on('error', (e) => { 
		AC.eventEmitter.emit("requestError", e.message);
	});

	req.write(postData);
	if (fileName)
		readStream.pipe(req);
	req.end();
};

AC.Server.prototype.initQs = function(op){
	var qs = {at:-1, ad:0, op:op, ap:this.pwd};
	if (this.filtre) {
		if (this.filtre.l) qs.l = this.filtre.l;
		if (this.filtre.c) qs.c = this.filtre.c;
		if (this.filtre.v) qs.v = this.filtre.v;
		if (this.filtre.types) qs.t = this.filtre.types;
	}
	return qs;
};
